#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var import_yargs = __toESM(require("yargs/yargs"));

// src/longscrape.ts
var import_chalk8 = __toESM(require("chalk"));
var import_puppeteer = __toESM(require("puppeteer"));

// src/extract/getOrg.ts
var import_chalk = __toESM(require("chalk"));
function getOrg(page) {
  return __async(this, null, function* () {
    console.log("Getting originization...");
    const org = yield page.$eval(
      ".breadcrumb li:nth-child(2) a",
      (el) => el.textContent
    );
    if (!org) {
      console.error(import_chalk.default.redBright("Could not find second link in breadcrumb."));
      return process.exit(1);
    }
    return org.trim();
  });
}

// src/extract/getHeaderText.ts
var import_chalk2 = __toESM(require("chalk"));
function getHeaderText(page) {
  return __async(this, null, function* () {
    console.log("Getting header text:");
    const h1 = yield page.$eval("h1", (el) => el.textContent);
    if (!h1) {
      console.error(import_chalk2.default.redBright("Could not find h1 element on page."));
      return process.exit(1);
    }
    return h1.trim();
  });
}

// src/extract/getDescription.ts
function getDescription(page) {
  return __async(this, null, function* () {
    console.log("Getting description...");
    const desc = yield page.$eval(
      ".notes.embedded-content",
      (el) => el.textContent
    );
    if (!desc) {
      console.error("Could not find `.notes.embedded-content`.");
      return process.exit(1);
    }
    return desc.trim();
  });
}

// src/extract/getResourceCount.ts
function getResourceCount(page) {
  return __async(this, null, function* () {
    console.log("Getting resource count...");
    const count = yield page.$$eval("ul.resource-list", (els) => els.length);
    return count;
  });
}

// src/extract/getUpdateMethod.ts
var import_chalk3 = __toESM(require("chalk"));
function getUpdateMethod(page) {
  return __async(this, null, function* () {
    console.log("Getting update method...");
    const text = yield page.$eval(
      "tbody tr:nth-child(4) td.dataset-details",
      (el) => el.textContent
    );
    if (!text) {
      console.error(import_chalk3.default.redBright("Could not find `Update Method` in table."));
      return process.exit(1);
    }
    return text;
  });
}

// src/extract/getUpdateRate.ts
var import_chalk4 = __toESM(require("chalk"));
function getUpdateRate(page) {
  return __async(this, null, function* () {
    console.log("Getting update rate...");
    const text = yield page.$eval(
      "tbody tr:nth-child(3) td.dataset-details",
      (el) => el.textContent
    );
    if (!text) {
      console.error(
        import_chalk4.default.redBright("Could not find `Update Rate` column in table.")
      );
      return process.exit(1);
    }
    return text;
  });
}

// src/extract/getFormats.ts
function getFormats(page) {
  return __async(this, null, function* () {
    console.log("Getting formats...");
    const formats = yield page.$$eval(
      "[data-format]",
      (els) => els.map((el) => el.getAttribute("data-format"))
    );
    const formatSet = new Set(
      formats.filter((format) => !!format)
    );
    return [...formatSet].join(",");
  });
}

// src/extract/getApi.ts
function getHasApi(page) {
  return __async(this, null, function* () {
    console.log("Checking whether there's an API...");
    const formats = yield page.$$eval(
      "[data-format]",
      (els) => els.map((el) => el.getAttribute("data-format"))
    );
    const hasApi = formats.some(
      (format) => format && ["xls", "xlsx", "csv"].includes(format.toLowerCase())
    );
    return !!hasApi ? "\u05D9\u05E9" : "\u05D0\u05D9\u05DF";
  });
}

// src/extract/index.ts
function extract(page) {
  return __async(this, null, function* () {
    const [
      url,
      org,
      name,
      description,
      resourceCount,
      updateMethod,
      updateRate,
      formats,
      hasAPI
    ] = yield Promise.all([
      page.url(),
      getOrg(page),
      getHeaderText(page),
      getDescription(page),
      getResourceCount(page),
      getUpdateMethod(page),
      getUpdateRate(page),
      getFormats(page),
      getHasApi(page)
    ]);
    return {
      url,
      org,
      name,
      description,
      resourceCount,
      updateRate,
      updateMethod,
      formats,
      hasAPI
    };
  });
}

// src/input/confirmAnswers.ts
var import_chalk5 = __toESM(require("chalk"));
var import_inquirer = __toESM(require("inquirer"));
var ResultToMessage = {
  name: "dataset name",
  org: "orginization name",
  description: "description",
  updateRate: "update rate",
  updateMethod: "update method",
  formats: "list of resource formats",
  resourceCount: "resource count"
};
function confirmAnswers(results) {
  return __async(this, null, function* () {
    const confirmAnswers2 = yield import_inquirer.default.prompt([
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(results.name)} the correct ${import_chalk5.default.yellow(
          ResultToMessage.name
        )}?`,
        name: "name"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(results.org)} the correct ${import_chalk5.default.yellow(
          ResultToMessage.org
        )}?`,
        name: "org"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(results.description)} the correct ${ResultToMessage.description}?`,
        name: "description"
      },
      {
        type: "confirm",
        message: `Is the ${import_chalk5.default.yellow(
          ResultToMessage.resourceCount
        )} ${import_chalk5.default.blue(results.resourceCount)}?`,
        name: "resourceCount"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(results.updateRate)} the correct ${import_chalk5.default.yellow(
          ResultToMessage.updateRate
        )}?`,
        name: "updateRate"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(
          results.updateMethod
        )} the correct ${import_chalk5.default.yellow(ResultToMessage.updateMethod)}?`,
        name: "updateMethod"
      },
      {
        type: "confirm",
        message: `Is "${import_chalk5.default.blue(results.formats)}" the correct ${import_chalk5.default.yellow(
          ResultToMessage.formats
        )}?`,
        name: "formats"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk5.default.blue(
          results.hasAPI
        )} the correct answer to "Has API?"`,
        name: "hasAPI"
      }
    ]);
    let questions = [];
    let final = {};
    for (let key in confirmAnswers2) {
      if (confirmAnswers2[key]) {
        final[key] = results[key];
      } else if (key === "hasAPI") {
        final[key] = !confirmAnswers2[key];
      } else {
        questions.push({
          type: "input",
          name: key,
          message: `Please enter the ${import_chalk5.default.yellow(
            ResultToMessage[key]
          )}:`,
          validate(input2) {
            return !!input2 || "REQUIRED";
          }
        });
      }
    }
    const rest = yield import_inquirer.default.prompt(questions);
    rest.hasAPI = !rest.hasAPI ? "\u05D9\u05E9" : "\u05D0\u05D9\u05DF";
    return __spreadValues(__spreadValues({}, final), rest);
  });
}

// src/input/inputAnswers.ts
var import_chalk6 = __toESM(require("chalk"));
var import_inquirer2 = __toESM(require("inquirer"));
function inputAnswers() {
  return __async(this, null, function* () {
    const _a = yield import_inquirer2.default.prompt([
      {
        type: "checkbox",
        choices: ["\u05D7\u05D9\u05E0\u05D5\u05DA", "\u05EA\u05E2\u05E1\u05D5\u05E7\u05D4", "\u05D9\u05D5\u05E7\u05E8 \u05D4\u05DE\u05D7\u05D9\u05D4", "\u05D0\u05D9\u05DB\u05D5\u05EA \u05D4\u05E1\u05D1\u05D9\u05D1\u05D4"],
        name: "areasOfFocus",
        message: `Which of these ${import_chalk6.default.yellow("areas of focus")} apply?`
      },
      {
        type: "input",
        message: `What is the ${import_chalk6.default.yellow(
          "latest update"
        )}? (Be sure to check the actual files)`,
        name: "latestUpdate",
        validate(input2) {
          return !!input2 || "REQUIRED";
        }
      },
      {
        type: "input",
        message: `What is the ${import_chalk6.default.yellow("relevant year range")}?`,
        name: "yearRangeForComparison",
        validate(input2) {
          return !!input2 || "REQUIRED";
        }
      },
      {
        type: "confirm",
        message: `Is this dataset ${import_chalk6.default.yellow("useful")}?`,
        name: "useful"
      },
      {
        type: "input",
        message: "Additional notes:",
        name: "notes"
      }
    ]), { useful, areasOfFocus } = _a, answers = __objRest(_a, ["useful", "areasOfFocus"]);
    return __spreadValues({
      useful: useful ? "\u05E9\u05D9\u05DE\u05D5\u05E9\u05D9" : "\u05DC\u05D0 \u05E9\u05D9\u05DE\u05D5\u05E9\u05D9",
      areasOfFocus: areasOfFocus.join(",")
    }, answers);
  });
}

// src/input/index.ts
function input(data) {
  return __async(this, null, function* () {
    const confirmed = yield confirmAnswers(data);
    const userInput = yield inputAnswers();
    return __spreadProps(__spreadValues(__spreadValues({}, confirmed), userInput), {
      url: data.url
    });
  });
}

// src/exec.ts
var import_child_process = require("child_process");
var import_util = require("util");
var exec = (0, import_util.promisify)(import_child_process.exec);

// src/input/reconfirm.ts
var import_as_table = __toESM(require("as-table"));
var import_chalk7 = __toESM(require("chalk"));
var import_inquirer3 = __toESM(require("inquirer"));
var ResultToLabel = {
  org: "Orginization",
  name: "Dataset Name",
  description: "Description",
  resourceCount: "Resource Count",
  updateRate: "Update Rate",
  updateMethod: "Update Method",
  formats: "Resource Formats",
  hasAPI: "Has an API?",
  areasOfFocus: "Areas of Focus",
  latestUpdate: "Latest Update",
  yearRangeForComparison: "Year Range",
  useful: "Useful",
  notes: "Notes"
};
function reconfirm(testerName, results) {
  return __async(this, null, function* () {
    const table = [];
    for (let [_key, value] of Object.entries(results)) {
      let key = _key;
      if (key === "url")
        continue;
      table.push({ KEY: ResultToLabel[key], VALUE: `${value}` });
    }
    console.log(
      `Would you say the following summarizes the Dataset at ${import_chalk7.default.blue(
        results.url
      )}?`
    );
    console.log();
    console.log("Name: " + testerName);
    console.log();
    console.log((0, import_as_table.default)(table));
    console.log();
    const { confirmed } = yield import_inquirer3.default.prompt([
      {
        name: "confirmed",
        type: "confirm",
        message: "Confirm: "
      }
    ]);
    return !!confirmed;
  });
}

// src/askForName.ts
var import_inquirer4 = __toESM(require("inquirer"));
function askForName() {
  return __async(this, null, function* () {
    const { name } = yield import_inquirer4.default.prompt([
      { message: "Enter your name: ", type: "input", name: "name" }
    ]);
    return name;
  });
}

// src/longscrape.ts
var fs = __toESM(require("fs/promises"));
var delay = (seconds) => new Promise((res) => setTimeout(res, seconds * 1e3));
function longScrape(url, priorName) {
  return __async(this, null, function* () {
    console.clear();
    const name = priorName != null ? priorName : yield askForName();
    console.log(`Loading new ${import_chalk8.default.green("puppeteer")} instance...`);
    console.log();
    const browser = yield import_puppeteer.default.launch({ headless: "new" });
    console.log(`Opening new page...`);
    console.log();
    const page = yield browser.newPage();
    console.log(`Setting ${import_chalk8.default.yellow("User-Agent")} header...`);
    console.log();
    yield page.setUserAgent("datagov-external-client");
    console.log(`Visiting ${import_chalk8.default.blue(url)}...`);
    console.log();
    yield page.goto(url, { waitUntil: "networkidle0" });
    console.log(`Extracting all easily readable data from ${import_chalk8.default.blue(url)}...`);
    console.log();
    const data = yield extract(page);
    console.log();
    console.log(
      `Opening ${import_chalk8.default.blue(url)} in ${import_chalk8.default.green("Google Chrome")}...`
    );
    yield delay(2);
    yield exec(`google-chrome ${url}`);
    let results = null;
    let confirmation = false;
    while (!confirmation) {
      console.log();
      results = yield input(data);
      console.log();
      confirmation = yield reconfirm(name, results);
      if (!confirmation)
        console.clear();
    }
    console.log(`Outputing result to ${import_chalk8.default.grey("output.csv")}...`);
    console.log();
    yield fs.appendFile(
      "output.csv",
      `${results.url},${results.org},${results.name},${results.description.split(",").join("\\,")},${results.resourceCount},${results.latestUpdate},${results.updateRate},${results.updateMethod},${results.yearRangeForComparison},${results.hasAPI},${results.formats.split(",").join("\\,")},${results.areasOfFocus.split(",").join("\\,")},${results.useful},${results.notes},${name}`
    );
    yield delay(1);
    console.log(`Closing ${import_chalk8.default.green("puppeteer")} instance...`);
    console.log();
    yield browser.close();
  });
}

// src/index.ts
var fs2 = __toESM(require("fs"));
var import_chalk9 = __toESM(require("chalk"));
function main() {
  return __async(this, null, function* () {
    const argv = yield (0, import_yargs.default)(process.argv.slice(2)).command("$0 [url]", "scrape a data.gov.il URL").epilogue(
      "If no [url] is provided, the command reads the links from `links.txt` and loops over them."
    ).help().parseAsync();
    if (argv.url) {
      longScrape(argv.url);
    } else {
      try {
        const raw = fs2.readFileSync("links.txt", "utf-8");
        const name = yield askForName();
        console.log();
        for (let line of raw.split("\n")) {
          console.log("Starting process for " + import_chalk9.default.blue(line));
          yield longScrape(line, name);
          console.clear();
        }
      } catch (error) {
        console.error(
          import_chalk9.default.redBright(
            "If no [url] is provided, the file `links.txt` must exist."
          )
        );
      }
    }
  });
}
main();
