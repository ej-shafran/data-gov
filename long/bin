#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var import_yargs = __toESM(require("yargs/yargs"));

// src/longscrape.ts
var import_chalk7 = __toESM(require("chalk"));
var import_puppeteer = __toESM(require("puppeteer"));

// src/extract/getOrg.ts
var import_chalk = __toESM(require("chalk"));
function getOrg(page) {
  return __async(this, null, function* () {
    console.log("Getting originization...");
    const org = yield page.$eval(
      ".breadcrumb li:nth-child(2) a",
      (el) => el.textContent
    );
    if (!org) {
      console.error(import_chalk.default.redBright("Could not find second link in breadcrumb."));
      return process.exit(1);
    }
    return org.trim();
  });
}

// src/extract/getHeaderText.ts
var import_chalk2 = __toESM(require("chalk"));
function getHeaderText(page) {
  return __async(this, null, function* () {
    console.log("Getting header text:");
    const h1 = yield page.$eval("h1", (el) => el.textContent);
    if (!h1) {
      console.error(import_chalk2.default.redBright("Could not find h1 element on page."));
      return process.exit(1);
    }
    return h1.trim();
  });
}

// src/extract/getDescription.ts
function getDescription(page) {
  return __async(this, null, function* () {
    console.log("Getting description...");
    const desc = yield page.$eval(
      ".notes.embedded-content",
      (el) => el.textContent
    );
    if (!desc) {
      console.error("Could not find `.notes.embedded-content`.");
      return process.exit(1);
    }
    return desc.trim();
  });
}

// src/extract/getResourceCount.ts
function getResourceCount(page) {
  return __async(this, null, function* () {
    console.log("Getting resource count...");
    const count = yield page.$$eval("ul.resource-list", (els) => els.length);
    return count;
  });
}

// src/extract/getUpdateMethod.ts
var import_chalk3 = __toESM(require("chalk"));
function getUpdateMethod(page) {
  return __async(this, null, function* () {
    console.log("Getting update method...");
    const text = yield page.$eval(
      "tbody tr:nth-child(4) td.dataset-details",
      (el) => el.textContent
    );
    if (!text) {
      console.error(import_chalk3.default.redBright("Could not find `Update Method` in table."));
      return process.exit(1);
    }
    return text;
  });
}

// src/extract/getUpdateRate.ts
var import_chalk4 = __toESM(require("chalk"));
function getUpdateRate(page) {
  return __async(this, null, function* () {
    console.log("Getting update rate...");
    const text = yield page.$eval(
      "tbody tr:nth-child(3) td.dataset-details",
      (el) => el.textContent
    );
    if (!text) {
      console.error(
        import_chalk4.default.redBright("Could not find `Update Rate` column in table.")
      );
      return process.exit(1);
    }
    return text;
  });
}

// src/extract/getFormats.ts
function getFormats(page) {
  return __async(this, null, function* () {
    console.log("Getting formats...");
    const formatSet = /* @__PURE__ */ new Set();
    const formats = yield page.$$eval(
      "[data-format]",
      (els) => els.map((el) => el.getAttribute("data-format"))
    );
    for (let format of formats) {
      if (format)
        formatSet.add(format);
    }
    return [...formatSet].join(",");
  });
}

// src/extract/getApi.ts
var import_chalk5 = __toESM(require("chalk"));
function getHasApi(browser, page) {
  return __async(this, null, function* () {
    console.log("Checking whether there's an API...");
    const href = yield page.$eval(
      ".resource-item a.btn",
      (el) => el.getAttribute("href")
    );
    if (!href) {
      console.error(import_chalk5.default.redBright("Could not find Eye icon in page."));
      return process.exit(1);
    }
    const newPage = yield browser.newPage();
    yield newPage.setUserAgent("datagov-external-client");
    yield newPage.goto(`https://data.gov.il/${href}`, {
      waitUntil: "networkidle0"
    });
    const apiBtn = yield newPage.$('[data-module="gov-api-info"]');
    return !!apiBtn ? "\u05D9\u05E9" : "\u05D0\u05D9\u05DF";
  });
}

// src/extract/index.ts
function extract(browser, page) {
  return __async(this, null, function* () {
    const [
      url,
      org,
      name,
      description,
      resourceCount,
      updateMethod,
      updateRate,
      formats,
      hasAPI
    ] = yield Promise.all([
      page.url(),
      getOrg(page),
      getHeaderText(page),
      getDescription(page),
      getResourceCount(page),
      getUpdateMethod(page),
      getUpdateRate(page),
      getFormats(page),
      getHasApi(browser, page)
    ]);
    return {
      url,
      org,
      name,
      description,
      resourceCount,
      updateRate,
      updateMethod,
      formats,
      hasAPI
    };
  });
}

// src/input/index.ts
var import_chalk6 = __toESM(require("chalk"));
var import_inquirer = __toESM(require("inquirer"));
function input(results) {
  return __async(this, null, function* () {
    const answers = yield import_inquirer.default.prompt([
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(results.name)} the correct ${import_chalk6.default.yellow(
          "collection name"
        )}?`,
        name: "name"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(results.org)} the correct ${import_chalk6.default.yellow(
          "orginization name"
        )}?`,
        name: "org"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(
          results.description
        )} the correct ${import_chalk6.default.yellow("description")}?`,
        name: "description"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(results.updateRate)} the correct ${import_chalk6.default.yellow(
          "update rate"
        )}?`,
        name: "updateRate"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(
          results.updateMethod
        )} the correct ${import_chalk6.default.yellow("update method")}?`,
        name: "updateMethod"
      },
      {
        type: "confirm",
        message: `Is "${import_chalk6.default.blue(results.formats)}" the correct ${import_chalk6.default.yellow(
          "list of resource formats"
        )}?`,
        name: "formats"
      },
      {
        type: "confirm",
        message: `Is ${import_chalk6.default.blue(
          results.hasAPI
        )} the correct answer to "Has API?"`,
        name: "hasAPI"
      }
    ]);
    console.log(answers);
  });
}

// src/longscrape.ts
function longFetch(url) {
  return __async(this, null, function* () {
    console.log(`Loading new ${import_chalk7.default.green("puppeteer")} instance...`);
    console.log();
    const browser = yield import_puppeteer.default.launch({ headless: "new" });
    console.log(`Opening new page...`);
    console.log();
    const page = yield browser.newPage();
    console.log(`Setting ${import_chalk7.default.yellow("User-Agent")} header...`);
    console.log();
    yield page.setUserAgent("datagov-external-client");
    console.log(`Visiting ${import_chalk7.default.blue(url)}...`);
    console.log();
    yield page.goto(url, { waitUntil: "networkidle0" });
    console.log(`Extracting all easily readable data from ${import_chalk7.default.blue(url)}...`);
    const data = yield extract(browser, page);
    yield input(data);
    return process.exit(0);
  });
}

// src/index.ts
var argv = (0, import_yargs.default)(process.argv.slice(2)).option("u", {
  alias: "url",
  demandOption: true,
  type: "string",
  desc: "URL to scrape the data from."
}).parseSync();
longFetch(argv.u);
